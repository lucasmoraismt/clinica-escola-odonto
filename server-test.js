require('dotenv').config();
const express = require('express');
const { GoogleGenerativeAI } = require('@google/generative-ai');

const app = express();
const PORT = 3001;

app.use(express.json());
app.use(express.static('public'));

// Configura√ß√£o do Google Gemini
const GEMINI_API_KEY = process.env.GEMINI_API_KEY;
const genAI = new GoogleGenerativeAI(GEMINI_API_KEY);

// Contexto da cl√≠nica para o Gemini
const clinicContext = `
Voc√™ √© um assistente IA especializado em odontologia para a Cl√≠nica Escola Odonto.

INFORMA√á√ïES DA CL√çNICA:
- Nome: Cl√≠nica Escola Odonto
- Tipo: Cl√≠nica escola de odontologia
- Hoje temos 8 consultas agendadas (6 confirmadas, 2 pendentes)
- Pr√≥ximo paciente: Ana Silva √†s 14:00 (Restaura√ß√£o dente 16, Aluno: Carlos Andrade)

SUAS ESPECIALIDADES:
1. Procedimentos odontol√≥gicos (restaura√ß√£o, canal, extra√ß√£o, limpeza, etc.)
2. Protocolos cl√≠nicos (anamnese, emerg√™ncias, biosseguran√ßa)
3. Gest√£o de pacientes e agendamentos
4. Orienta√ß√µes para estudantes de odontologia
5. D√∫vidas administrativas da cl√≠nica

INSTRU√á√ïES DE FORMATA√á√ÉO:
- SEMPRE formate sua resposta em Markdown
- Use cabe√ßalhos (##, ###) para organizar t√≥picos
- Use listas numeradas (1., 2., 3.) para procedimentos sequenciais
- Use listas com marcadores (-, *) para itens relacionados
- Use **negrito** para termos importantes
- Use \`codigo\` para nomes de medicamentos ou materiais espec√≠ficos
- Use > cita√ß√µes para protocolos importantes
- Use tabelas quando apropriado

INSTRU√á√ïES DE CONTE√öDO:
- Responda de forma clara e did√°tica
- Use linguagem t√©cnica quando apropriado, mas explique termos complexos
- Para procedimentos, liste os passos principais organizados
- Seja espec√≠fico sobre protocolos de seguran√ßa
- Mantenha o foco em odontologia e gest√£o cl√≠nica
- Se n√£o souber algo espec√≠fico da cl√≠nica, seja honesto
- Limite suas respostas a aproximadamente 250 palavras
`;

// Rota de teste
app.get('/api/test', (req, res) => {
  res.json({ message: 'Servidor funcionando!', timestamp: new Date() });
});

// Rota do chat
app.post('/api/chat', async (req, res) => {
  console.log('Rota /api/chat chamada com:', req.body);
  
  try {
    const { message } = req.body;
    
    if (!message || message.trim() === '') {
      return res.status(400).json({ 
        response: 'Por favor, digite uma mensagem.',
        timestamp: new Date().toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' })
      });
    }

    // Verificar se a API key est√° configurada
    if (!GEMINI_API_KEY) {
      return res.json({
        response: 'üîë Para usar o assistente IA, configure sua API key do Google Gemini no arquivo .env',
        timestamp: new Date().toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' })
      });
    }

    console.log(`[CHAT] Pergunta recebida: ${message}`);

    // Configurar o modelo Gemini
    const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });

    // Criar prompt completo com contexto
    const fullPrompt = `${clinicContext}\n\nPergunta do usu√°rio: ${message}`;

    // Gerar resposta
    const result = await model.generateContent(fullPrompt);
    const response = await result.response;
    const text = response.text();

    console.log(`[CHAT] Resposta gerada com sucesso`);

    res.json({ 
      response: text,
      timestamp: new Date().toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' })
    });
    
  } catch (error) {
    console.error('Erro no chat com Gemini:', error);
    
    let errorMessage = 'Desculpe, ocorreu um erro. Tente novamente.';
    
    if (error.message.includes('API_KEY')) {
      errorMessage = 'üîë Erro de autentica√ß√£o. Verifique se a API key do Gemini est√° correta.';
    } else if (error.message.includes('quota')) {
      errorMessage = '‚ö†Ô∏è Limite de uso da API atingido. Tente novamente mais tarde.';
    } else if (error.message.includes('network') || error.message.includes('fetch')) {
      errorMessage = 'üåê Erro de conex√£o. Verifique sua internet e tente novamente.';
    }
    
    res.status(500).json({ 
      response: errorMessage,
      timestamp: new Date().toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' })
    });
  }
});

app.listen(PORT, () => {
  console.log(`Servidor de teste rodando em http://localhost:${PORT}`);
  console.log(`API Key Gemini configurada: ${GEMINI_API_KEY ? 'SIM' : 'N√ÉO'}`);
});